#!/command/with-contenv bash
#shellcheck shell=bash

# redirect stderr to stdout so it's picked up in the docker logs
exec 2>&1
# all errors will show a line number and the command used to produce the error
SCRIPT_PATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd)/$(basename "$0")"
trap 'echo -e "[ERROR] $SCRIPT_PATH in line $LINENO when executing: $BASH_COMMAND"' ERR

APPNAME="$(hostname)/socket30003"

[[ "$LOGLEVEL" != "ERROR" ]] && echo "[$APPNAME][$(date)] Socket30003 started as an s6 service" || true

# -----------------------------------------------------------------------------------
# Copyright 2020-2025 Ramon F. Kolb - licensed under the terms and conditions
# of GPLv3. The terms and conditions of this license are included with the Github
# distribution of this package, and are also available here:
# https://github.com/sdr-enthusiasts/planefence4docker/
#
# The package contains parts of, and modifications or derivatives to the following:
# Dump1090.Socket30003 by Ted Sluis: https://github.com/tedsluis/dump1090.socket30003
# These packages may incorporate other software and license terms.
# -----------------------------------------------------------------------------------
#
# Make sure the /run directory exists
mkdir -p /run/socket30003
#
# Load parameters from the config file:
#[[ -f /usr/share/planefence/persist/planefence.config ]] && export $(grep -v '^\s*#' /usr/share/planefence/persist/planefence.config | xargs)
[[ -f /usr/share/planefence/persist/planefence.config ]] && set -o allexport && source /usr/share/planefence/persist/planefence.config && set +o allexport

# If things went wrong then simply sleep forever.
# No need to notify -- .../run/planefence is doing the same thing and is
# screaming all over the logs by now.
if [[ "x$FEEDER_LAT" == "x" ]] || [[ "$FEEDER_LAT" == "90.12345" ]]
then
	sleep infinity
fi
# $LOOPTIME is used to delay a restart after socket30003 exits for any reason, as not to
# spam the system with restarts:
LOOPTIME=15
#
# set params in socket30003.conf
sed -i 's/\(^\s*latitude=\).*/\1'"$FEEDER_LAT"'/' /usr/share/socket30003/socket30003.cfg
sed -i 's/\(^\s*longitude=\).*/\1'"$FEEDER_LONG"'/' /usr/share/socket30003/socket30003.cfg
[[ "x$PF_SOCK30003HOST" != "x" ]] && sed -i 's|\(^\s*PEER_HOST=\).*|\1'"$PF_SOCK30003HOST"'|' /usr/share/socket30003/socket30003.cfg

if [[ "x$PF_DISTUNIT" != "x" ]]
then
	sed -i 's/\(^\s*distanceunit=\).*/\1'"$PF_DISTUNIT"'/' /usr/share/socket30003/socket30003.cfg
else
	sed -i 's/\(^\s*distanceunit=\).*/\1nauticalmile/' /usr/share/socket30003/socket30003.cfg
fi
if [[ "x$PF_ALTUNIT" != "x" ]]
then
	sed -i 's/\(^\s*altitudeunit=\).*/\1'"$PF_ALTUNIT"'/' /usr/share/socket30003/socket30003.cfg
else
	sed -i 's/\(^\s*altitudeunit=\).*/\1feet/' /usr/share/socket30003/socket30003.cfg
fi
if [[ "x$PF_SPEEDUNIT" != "x" ]]
then
	sed -i 's/\(^\s*speedunit=\).*/\1'"$PF_SPEEDUNIT"'/' /usr/share/socket30003/socket30003.cfg
else
	sed -i 's/\(^\s*speedunit=\).*/\1knotph/' /usr/share/socket30003/socket30003.cfg
fi
[[ "x$PF_SOCK30003PORT" == "x" ]] && PF_SOCK30003PORT=30003 || true
sed -i 's|\(^\s*PEER_PORT=\).*|\1'"$PF_SOCK30003PORT"'|' /usr/share/socket30003/socket30003.cfg

# -----------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Now start dump1090.socket30003 in a loop that restarts it $LOOPTIME seconds after it exits or crashes:
[[ "$LOGLEVEL" != "ERROR" ]] && echo "[$APPNAME][$(date)] socket30003 starting its initial run now" || true
while true
do

	# First make sure that $PF_SOCK30003HOST is defined
	if [[ "x$PF_SOCK30003HOST" == "x" ]]
	then
		echo "[$APPNAME][$(date)] \$PF_SOCK30003HOST is not set in the .env or docker-compose.yml file. Cannot run! Please update and restart the container."
	else
		# if $PF_SOCK30003HOST is defined, then check if we can reach it. Execute socket30003 if we can reach it, complain if we can't
		# we do this inside this endless loop so it will show in the logs regularly
		if timeout --preserve-status 5 netcat -z -v $PF_SOCK30003HOST $PF_SOCK30003PORT >/dev/null 2>&1
		then
      sleep .4 # delay startup a little bit as to not interrupt file pruning
      echo "[$APPNAME][$(date)] socket30003 starting up."
			/usr/share/socket30003/socket30003.pl >/dev/null 2>&1 && [[ ! -f /tmp/socket-cleanup ]] && echo "[$APPNAME][$(date)] /usr/share/socket30003/socket30003.pl exited with code $?"
		else
			echo "[$APPNAME][$(date)] We cannot reach \"$PF_SOCK30003HOST\" on port $PF_SOCK30003PORT."
			echo "[$APPNAME][$(date)] If this error keeps on repeating, please make sure that"
			echo "[$APPNAME][$(date)] readsb/dump1090[-fa]/tar1090 is running and producing SBS data on port $PF_SOCK30003PORT!"
		fi
	fi
	if [[ ! -f /tmp/socket-cleanup ]]
	then
		echo "[$APPNAME][$(date)] socket30003 has exited... restarting in $LOOPTIME"
		sleep $LOOPTIME
	else
		sleep 1s
		rm -f /tmp/socket-cleanup
	fi
	[[ "$LOGLEVEL" != "ERROR" ]] && echo "[$APPNAME][$(date)] socket30003 restarting now" || true
done
