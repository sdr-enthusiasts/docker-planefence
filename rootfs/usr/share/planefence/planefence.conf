# PLANEFENCE.CONF - user changeable variables for PLANEFENCE.SH
#
# Copyright 2020 Ramon F. Kolb - licensed under the terms and conditions
# of GPLv3. The terms and conditions of this license are included with the Github
# distribution of this package, and are also available here:
# https://github.com/kx1t/planefence/
#
# The package contains parts of, and modifications or derivatives to the following:
# Dump1090.Socket30003 by Ted Sluis: https://github.com/tedsluis/dump1090.socket30003
# These packages may incorporate other software and license terms.
#
# Summary of License Terms
# This program is free software: you can redistribute it and/or modify it under the terms of
# the GNU General Public License as published by the Free Software Foundation, either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program.
# If not, see https://www.gnu.org/licenses/.
# -----------------------------------------------------------------------------------
# Feel free to make changes to the variables below. However, it is
# STRONGLY RECOMMENDED to RTFM! See explanation below and README.md for explanation of what these do.
#
#
# The web directory you want PlaneFence to write to:

	OUTFILEDIR=/usr/share/planefence/html

#
# the directory where this file and planefence.py are located:

	PLANEFENCEDIR=/usr/share/planefence

#
# MAXALT: only planes below this altitude are reported. Must correspond to the altitude unit set in socket30003.conf:

	MAXALT=5000

#
# ALTCORR: Local altitude above sea level

  ALTCORR=0

#
# DIST: only planes closer than this distance are reported:

	DIST=2.0

#
# Latitude and Longitude of the center point of the map (see also CALCDIST below)"

	LAT=12.34566 # Latitude of the center point of the map
	LON=-89.76543 # Longitude of the center point of the map

#
# HISTTIME: number of days shown in the history section of the website:

	HISTTIME=7

#
# COLLAPSEWITHIN: number of seconds between end time of an entry to start time of new entry within which
# 				  the two entries will be collapsed

	COLLAPSEWITHIN=300

#
# CALCDIST determines if we will recalculate the distance to the plane based on the LON/LAT parameters provided above
# If set to CALCDIST="--calcdist", then:
#	- The system will recalculate the distance for every plane
#	- ATTENTION: the DIST parameter above will subsequently be interpreted in STATUTE (US) MILES
#	- If you prefer to use a different unit (km, nautical miles, etc.) please do NOT set CALCDIST="--calcdist"
# If set to CALCDIST="", then
#	- the system will interpret the distance provided by socket30003 in whatever the units are that socket30003 uses
#	- you MUST use this if your data is not in STATUTE MILES
#	- If you want to change the centerpoint of your calculations, you must change LONG/LAT in socket30003.conf. See that package
#	  for information on how to do this
#	- LON and LAT as defined above are only used in the title of the HTML page

#	CALCDIST="--calcdist"
	CALCDIST=""

#
# MY:text for the header of the website.

	MY="my"

#
# link for $MY in the website's header. This can be a full URL, or a relative location like ".."

	MYURL=".."

#
# Twitter handle for PlaneTweet. Comment this out if PlaneTweet is not available or disabled
# NOTE - if this field is defined and not empty, PlaneFence WILL try to invoke PlaneTweet to send a tweet!
# By default it's disabled. If enabled, note that tweeting will ONLY work if you also follow the PlaneTweet
# instructions for installation and set-up.

	PLANETWEET=

#
# ATTRIB contains the attribution line at the bottom of the tweet

        ATTRIB="Planefence by kx1t - docker:kx1t/planefence"

#
# PlaneHeat is an add-on that gets installed by default. It tracks a daily heatmap for planes that fly inside the
# PlaneFence coverage area. If you don't want to use it, comment out the parameter below.
# Normally, you don't need to update this parameter unless you moved 'planeheat.sh' to some other location,
# which we don't recommend doing unless you know which other files to move with it.

  PLANEHEATSCRIPT=$PLANEFENCEDIR/planeheat.sh

#
# HEATMAPHEIGHT determines the height of the heatmap on the website. The default is "40vh" which means 40% of the viewport height of the window
# Similarly, HEATMAPWIDTH determines the width of the heatmap on the website. The default is "75vw" which means 75% of the viewport width of the window.
# HEATMAPZOOM is the default OpenStreetMap zoom level for the map.

	HEATMAPHEIGHT=40vh
	HEATMAPWIDTH=75vw
	HEATMAPZOOM=13

# The next few variables are only relevant if you are using NoiseCapt
# Note - the system figures out by itself is NoiseCapt is running (by looking at the NoiseCapt Systemd Service), so you don't need to set this here.
# The next few variables define the background colors for the cell that contains the Loudness information on the website

	RED="LightCoral" # background cell color for Loudness
	YELLOW="Gold" # background cell color for Loudness
	GREEN="YellowGreen" # background cell color for Loudness

#
# These variables define the limit values for Loudness to be show green or yellow (instead of red)
# For example: if GREENLIMIT=9 and YELLOWLIMIT=16, then 9 dB or less loudness will show as $GREEN,
# 10-16 dB loudness will show as $YELLOW, and 17 dB or more loudness will show as $RED

	GREENLIMIT=9 # Max. Loudness level to be shown green
	YELLOWLIMIT=16 # Max. Loudness level to be shown yellow

#
# Last, a few variables related to logging:
#
# LOGFILE indicates where we write logs to.
# Use one of these:
# LOGFILE=/path/to/logfile.log
# LOGFILE=/dev/null # this switches off logging entirely
# LOGFILE=logger # if $LOGFILE is set to "logger", then the logs are written to /var/log/syslog. This is good for debugging purposes.
# LOGFILE=/dev/stdout # this writes the log to the terminal you're currently logged into. Normally not very useful.

	LOGFILE=/dev/stdout

#
# VERBOSE indicates if we capture verbose information from planefence.py.
# The only valid values are VERBOSE="--verbose" and VERBOSE=""

	VERBOSE="--verbose"

#
# The following parameters define the file names of the temporary files and the output files
# If you set $OUTFILEDIR to the correct HTML path above, you shouldn't have to change anything here.

#
# TMPDIR is the location of the tmp directory, normally /tmp
  TMPDIR=/tmp

#
# LOGFILEBASE is the full path name for the base part of the Socket30003 log file name.
# That file normally has the format /tmp/dump1090-127_0_0_1-[yymmdd].txt

  LOGFILEBASE=/run/socket30003/dump1090-127_0_0_1-

#
# OUTFILEBASE is the full path name for the base part of the output file

  OUTFILEBASE=$OUTFILEDIR/planefence

#
# OUTFILEHTML and OUTFILECSV are the full HTML / CSV file names that today's data will be written to.
# PLANEHEATHTML is the file name that the localized heatmap will be stored in.
#
# Note that planefence.sh will use FENCEDATE depending on the command line argument. If no command line
# argument is provided, 'today' is assumed.
# As such, you can rely on FENCEDATE to be the correct date string in the format "yymmdd".

  OUTFILEHTML=$OUTFILEBASE-$FENCEDATE.html
  OUTFILECSV=$OUTFILEBASE-$FENCEDATE.csv
  PLANEHEATHTML=$OUTFILEBASE-$FENCEDATE-heatmap.html
  OUTFILEHTMTMP=$OUTFILEHTML.tmp
	AUTOREFRESH=true


# The script smartly only processes those lines from the socket30003 output file that haven't previously been assessed.
# When you run the script regularly (say, every 2 minutes), this will save you TONS of processing time. We need a few temp
# files to keep track of all of this:

  OUTFILETMP=$TMPDIR/dump1090-pf-temp.csv
  INFILETMP=$TMPDIR/dump1090-pf.txt
  TMPLINES=/usr/share/planefence/persist/.internal/dump1090-pf-temp-$FENCEDATE.tmp
  TOTLINES=/usr/share/planefence/persist/.internal/dump1090-pf-total-$FENCEDATE.tmp

#
# HISTORY and HISFILE:
# This is for future-proofing. Currently, the history data is written directly to the planefence HTML file.
# In the future, we are planning to create a separate history file that gets dynamically loaded as an IFRAME.
# The current approach has the advantage that each file, even old files, contains links to the 7 previous days
# counting from when the file was generated. The future change will only display the 7 days history from 'today',
# regardless of which (past) date you are looking at.

  HISTORY=history.html
  HISFILE=$OUTFILEDIR/$HISTORY

#
# SOCKETCONFIG provides the location of the dump1090.socket30003.cfg file. This is used to get the default units of the log files

  SOCKETCONFIG=/usr/share/socket30003/socket30003.cfg

#
# TRACKSERVICE determines of the flight URL links to FlightAware or ADSBExchange
# Valid values are "adsbexchange" and "flightaware"

  TRACKSERVICE=adsbexchange

# If NOISECAPT runs on a remote system, REMOTENOISE will contain the credentials to get the files.
# Two notes:
# - See noisecapt.sh for instructions on how to set this up
# - REMOTENOISE will be used to pass the username / remote-ip to SCP, as in "SCP user@remote:/file /local/file"
#   As such, make sure that REMOTENOISE contains the correct user@remote combo
# If you don't run NOISECAPT remotely, please comment out the parameter.

	REMOTENOISE=
	NOISEGRAPHBASE="noisegraph-$FENCEDATE"

#
# PLANEALERT is a separate script that can run to check if a plane with a specific ICAO was detected
# Set this parameter to true for the script to be invoked, comment it out for the script not to be invoked
# This feature was originally meant to see if a so-called "dictator plane" passed by the station
# and the ICAO list was derived from the planes that were heard by dictatoralert.org
# This list can be enhanced with any ICAO the user is interested in.
# PLALERTFILE contains the full path to plane-alert.sh

	PLANEALERT=OFF
	PLALERTFILE=/usr/share/plane-alert/plane-alert.sh

#
# AIRLINECODES contains the directory where the file with the airline code translation table can be located. If there is none, leave it empty
# OWNERDBCACHE is the cache time (in days) for the any N-number lookup results in the FAA database. We cache these values not to overburden
# the FAA database with recursive lookups, however, we want the cache to expire once in a while so new owner names are picked up
# Suggestion is to set this to around 7 (days).
# REMOTEMISSCACHE is the time between 2 missed queries to the database. To avoid spamming this, we check every 7200 (seconds) = 2 hours

	AIRLINECODES="/usr/share/planefence/persist/airlinecodes.txt"
	OWNERDBCACHE=7
	REMOTEMISSCACHE=7200
	REMOTEURL=https://get-airline.planefence.com
	CHECKREMOTEDB=ON
#
# IGNORELIST points at a file that contains grep expressions that are used to filter the incoming planes
# These are "grepped" out from OUTFILECSV, so the IGNORELIST file can have anything from ICAO, Flight numbers, 3-letter airline codes, dates, etc.
# as long as these items are represented in OUTFILECSV. This means that 'AAL' would work as a filter, but 'American Airlines' would not.

	IGNORELIST="/usr/share/planefence/persist/planefence-ignore.txt"

#
# If IGNOREDUPES is non-empty, it will filter out occurences of the same aircraft+flight number combinations for the same day

	IGNOREDUPES=

#
# If FUDGELOC is non-empty, the map and listed coordinates will be "fudged", i.e.
# rounded as to hide your exact location
# Edits 8-feb-2022: now also support values 0 and 1.
# FUDGELOC=2 will round your LAT/LON to the nearest 0.01 degrees (2 decimals). The actual
#               distance will vary depending on your latitude, but around 42 deg N, this is
#               about 0.5 miles / 0.75 km
# FUDGELOC=3 will round your LAT/LON to the nearest 0.001 degrees (3 decimals). This
#               corresponds to about 300 ft / 100 m at 42 deg N.
# FUDGELOC set to any other non-empty value is the same as PF_FUDGELOC=3

	FUDGELOC=

#
# SCREENSHOTURL is the URL to the screenshotting container.
# Default value is http://screenshot:5042 which corresponds to the "screenshot" container (tedder42/browser-screenshot-service) as defined in the
# example docker-compose.yml file.
# The URL should be called with GET /snap/xxxxxx (for example, http://screenshot:5042/snap/AC0220) and return a PNG image
# If you don't want to use this service, you can comment out the parameter, or simply not install the screenshot container.

	SCREENSHOTURL="http://screenshot:5042"
	SCREENSHOT_TIMEOUT=45

# When OPENAIP_LAYER is set to ON, the OPENAIP layer is shown on the heatmap

	OPENAIP_LAYER=OFF

# TWEET_BEHAVIOR determines if a Planefence Tweet is sent after the initial observation or after the last observation within the Fence
# Default: POST     Valid values: POST, PRE     Assumed value if omitted or "not PRE": POST

	TWEET_BEHAVIOR=POST

# TWEET_MINTIME is the minimum wait time (in seconds) before a tweet is sent, measure from either the
# first observation of the aircraft in the fence, or the last observation of the aircraft in the fence
# depending on the TWEET_BEHAVIOR setting. Default value is 100 (secs)

	TWEET_MINTIME=100

# TWEETEVERY determines if a PF Tweet is sent for EVERY occurrence of a plane in the list, or only for the first daily occurrence

	TWEETEVERY=false

# PA_LINK is a URL that points from the PlaneFence web page to the Plane Alert webpage
# If empty, it's omitted

	PA_LINK=

# Discord Integration
# export all Discord related variables so send-discord-alert.py has access to the necessary params:
set -a
# Instructions for setup can be found in README-discord-alerts.md
# To receive messages from Planefence set PF_DISCORD to ON or true

	PF_DISCORD=false
	PA_DISCORD=false

# One or more webhook URLs to send messages to. Comma-separated if you're sending to multiple channels.
	PF_DISCORD_WEBHOOKS=
	PA_DISCORD_WEBHOOKS=
	DISCORD_FEEDER_NAME=

# DISCORD_MEDIA controls what type of file attachment is sent to Discord
#   If this is blank no media will be attached
#   "screenshot"
#     Attach a screenshot of tar1090 using the configured SCREENSHOTURL
#   "photo"
#     Attach a photo of the plane if available. Only works for plane-alert
#   "photo+screenshot"
#     Plane-Alert:
#       Attach the photo, if available, as the main image and a screenshot as the thumbnail
#     Planefence:
#       Same as "screenshot"
#    "screenshot+photo"
#     Plane-Alert:
#       Attach the screenshot as the main image and a photo, if available, as the thumbnail
#     Planefence:
#       Same as "screenshot"
	DISCORD_MEDIA=
#
set +a
# MASTODON parameters for MASTODON notifications as an alternative to Twitter:
# MASTODON_SERVER contains the mastodon server name, for example "airwaves.social"
# MASTODON_ACCESS_TOKEN contains the mastodon access token needed for posting
	MASTODON_SERVER=
	MASTODON_ACCESS_TOKEN=
	MASTODON_VISIBILITY=unlisted
#
# ---------------------------------------------------------------------
# NOTIFICATION_SERVER contains the address (hostname or IP address) to the Notification Server.
# If omitted, "planefence-notifier" will be assumed, which is the default name for the Planefence
# Notification Server.
# Planefence and Plane-Alert will attempt to connect to this server whenever a new notification is to be sent,
# and ignore/continue if the notification server cannot be reached.
# You can explicitly set NOTIFICATION_SERVER=OFF to stop Planefence/Plane-Alert from trying.
	NOTIFICATION_SERVER=planefence-notifier

	PF_MOTD=

# Last, the version. Although you could change this, for tracking purposes, we'd like you to leave it to whatever the
# official version number is. If you fork this software, we'd appreciate if you add on to the version number rather than
# replace the entire number. That way, it's easy to understand from which version you forked. For example, VERSION=3.11-myfork-1.0

  VERSION=5.22-release
